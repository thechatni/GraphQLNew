{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fahad Ahmad\\\\Documents\\\\GitHub\\\\graphql\\\\GraphQL\\\\client\\\\src\\\\components\\\\BookList.js\";\nimport { gql } from \"@apollo/client\"; // import { graphql } from \"@apollo/client\";\n\nimport { useQuery } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getBooksQuery = gql`\n  {\n    books {\n      name\n    }\n  }\n`;\nconst {\n  loading,\n  error,\n  data\n} = useQuery(getBooksQuery); // if (loading) return <p>Loading...</p>;\n// if (error) return <p>Error :(</p>;\n//   return data.rates.map(({ currency, rate }) => (\n//     <div key={currency}>\n//       <p>\n//         {currency}: {rate}\n//       </p>\n//     </div>\n//   ));\n\nconsole.log(data);\n\nconst BookList = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      id: \"book-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Book name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_c = BookList;\nexport default BookList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookList\");","map":{"version":3,"sources":["C:/Users/Fahad Ahmad/Documents/GitHub/graphql/GraphQL/client/src/components/BookList.js"],"names":["gql","useQuery","getBooksQuery","loading","error","data","console","log","BookList"],"mappings":";AAAA,SAASA,GAAT,QAAoB,gBAApB,C,CACA;;AACA,SAASC,QAAT,QAAyB,gBAAzB;;AAEA,MAAMC,aAAa,GAAGF,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA,CANA;AAQA,MAAM;AAAEG,EAAAA,OAAF;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA;AAAlB,IAA2BJ,QAAQ,CAACC,aAAD,CAAzC,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAI,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AAEA,MAAMG,QAAQ,GAAG,MAAM;AACrB,sBACE;AAAA,2BACE;AAAI,MAAA,EAAE,EAAC,WAAP;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGL,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFd,EAGGC,KAAK,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAXD;;KAAMI,Q;AAaN,eAAeA,QAAf","sourcesContent":["import { gql } from \"@apollo/client\";\r\n// import { graphql } from \"@apollo/client\";\r\nimport { useQuery } from \"@apollo/client\";\r\n\r\nconst getBooksQuery = gql`\r\n  {\r\n    books {\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nconst { loading, error, data } = useQuery(getBooksQuery);\r\n\r\n// if (loading) return <p>Loading...</p>;\r\n// if (error) return <p>Error :(</p>;\r\n\r\n//   return data.rates.map(({ currency, rate }) => (\r\n//     <div key={currency}>\r\n//       <p>\r\n//         {currency}: {rate}\r\n//       </p>\r\n//     </div>\r\n//   ));\r\n\r\nconsole.log(data);\r\n\r\nconst BookList = () => {\r\n  return (\r\n    <div>\r\n      <ul id=\"book-list\">\r\n        <li>Book name</li>\r\n        {loading && <p>Loading...</p>}\r\n        {error && <p>Error</p>}\r\n        {/* <button onClick={() => ExchangeRates()}>Get Data</button> */}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookList;\r\n"]},"metadata":{},"sourceType":"module"}